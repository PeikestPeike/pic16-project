import random
def count_nphrases(s, n=1):
    '''
        count the number of occurrence of n-word phrases in a string
    Args:
        s: str.
        n: positive int. should have default value 1.
    Returns:
        a dict keyed by n-word phrases whose values are the number of occurrences in s
    '''
    word_list = s.split()
    D={}
    for i in range(len(word_list)-n+1):
        # Turn the list of words to a single string for assigning to the dictionary
        if " ".join(word_list[i:i+n]) in D:
            D[" ".join(word_list[i:i+n])] += 1
        else:
            D[" ".join(word_list[i:i+n])] = 1
    return D
    
    
def markov_text_words(s, n, length=100, seed="Emma Woodhouse is a girl who"):
    """Generate fake text according to an n-th order Markov model, with data from a user-supplied corpus. 
    Args:
        s: str. the text from which to learn grams.
        n: positive int. the order of the Markov model. 
        length: positive int. the number of words to generate. should have a default value. 
        seed: str. should have a default value.
    Returns:
        The output string fake_text. fake_text starts with the seed. 
        length of fake_text = length of seed + argument 'length'
    """
    # fake_text starts with the seed, so initiate it as:
    fake_text = seed
    # generate the dictionary of n+1-word phrases:
    Phrases = count_nphrases(s, n+1)
    # generate a new word for the text until hits the length limit
    for i in range(length):
        # For the convenience of choosing the last word later, turn the string to list again
        recent = fake_text.split()[-n:]
        #initiate two lists to store the phrases and their weights
        options=[]
        weights=[]
        for st in Phrases.keys():
            st_list = st.split()
            # add any phrases that start with the last n words in the text to the list
            if st_list[:n] == recent:
                options.append(st_list)
                weights.append(Phrases[st])
        # randomly choose a phrase from the options
        rd = random.choices(options, weights)
        # add the last word to the string
        fake_text += " " + rd[0][-1]
    return fake_text
 
markov_text_words(s,3)
